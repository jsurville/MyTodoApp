{"version":3,"file":"link-to.directive.js","sourceRoot":"ng://@angular-component/router/","sources":["lib/link-to.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { Router } from './router.service';\nimport { Params } from './route-params.service';\n\nconst DEFAULT_TARGET = '_self';\n\n/**\n * The LinkTo directive links to routes in your app\n *\n * Links are pushed to the `Router` service to trigger a route change.\n * Query params can be represented as an object or a string of names/values\n *\n * <a linkTo=\"/home/page\" [queryParams]=\"{ id: 123 }\">Home Page</a>\n * <a [linkTo]=\"'/pages' + page.id\">Page 1</a>\n */\n@Directive({ selector: 'a[linkTo]' })\nexport class LinkTo {\n  @Input() target = DEFAULT_TARGET;\n  @HostBinding('href') linkHref?: string | null;\n\n  @Input() set linkTo(href: string | null | undefined) {\n    if (href === null || href === undefined) {\n      return;\n    }\n    this._href = href;\n    this._updateHref();\n  }\n\n  @Input() set queryParams(params: Params | null | undefined) {\n    this._query = params;\n    this._updateHref();\n  }\n\n  @Input() set fragment(hash: string | null | undefined) {\n    this._hash = hash;\n    this._updateHref();\n  }\n\n  @Output() hrefUpdated: EventEmitter<string> = new EventEmitter<string>();\n\n  private _href: string;\n  private _query: Params;\n  private _hash: string;\n\n  constructor(private router: Router) {}\n\n  /**\n   * Handles click events on the associated link\n   * Prevents default action for non-combination click events without a target\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: any) {\n    if (!this._href) {\n      return;\n    }\n    if (!this._comboClick(event) && this.target === DEFAULT_TARGET) {\n      this.router.go(this._href, this._query, this._hash);\n\n      event.preventDefault();\n    }\n  }\n\n  private _updateHref() {\n    const href = this._cleanUpHref(this._href);\n\n    this.linkHref = this.router.serializeUrl(href, this._query, this._hash);\n\n    this.hrefUpdated.emit(this.linkHref);\n  }\n\n  /**\n   * Determines whether the click event happened with a combination of other keys\n   */\n  private _comboClick(event) {\n    const buttonEvent = event.which || event.button;\n\n    return buttonEvent > 1 || event.ctrlKey || event.metaKey || event.shiftKey;\n  }\n\n  private _cleanUpHref(href: string = ''): string {\n    // Trim whitespaces and remove trailing slashes\n    return href.trim().replace(/(?!^)\\/+$/, '');\n  }\n}\n"]}